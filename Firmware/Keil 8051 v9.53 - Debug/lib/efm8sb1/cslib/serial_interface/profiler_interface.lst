C51 COMPILER V9.60.0.0   PROFILER_INTERFACE                                                07/15/2021 10:43:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PROFILER_INTERFACE
OBJECT MODULE PLACED IN .\lib\efm8sb1\cslib\serial_interface\profiler_interface.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Pedro\G
                    -oogle Drive\UNICAMP\Mestrado\Firmware\lib\efm8sb1\cslib\serial_interface\profiler_interface.c OMF2 SMALL DEBUG OBJECTEXT
                    -END ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Pedro\Google
                    - Drive\UNICAMP\Mestrado\Firmware\lib\efm8sb1\cslib\serial_interface;C:\Users\Pedro\Google Drive\UNICAMP\Mestrado\Firmwar
                    -e\lib\efm8sb1\cslib\serial_interface_inc;C:\Users\Pedro\Google Drive\UNICAMP\Mestrado\Firmware\inc\config;C:\Users\Pedro
                    -\Google Drive\UNICAMP\Mestrado\Firmware\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_caps
                    -ense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8SB1/efm8_capsense/device_layer;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/develop
                    -er/sdks/8051/v4.1.7//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8SB1/ef
                    -m8_capsense/serial_interface) PRINT(.\lib\efm8sb1\cslib\serial_interface\profiler_interface.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\lib\efm8sb1\cslib\serial_interface\profiler_interface.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "cslib_hwconfig.h"
*** WARNING C317 IN LINE 72 OF C:\Users\Pedro\Google Drive\UNICAMP\Mestrado\Firmware\inc\config\cslib_hwconfig.h: attemp
             -t to redefine macro 'ACTIVE_THRESHOLD_ARRAY'
*** WARNING C317 IN LINE 83 OF C:\Users\Pedro\Google Drive\UNICAMP\Mestrado\Firmware\inc\config\cslib_hwconfig.h: attemp
             -t to redefine macro 'INACTIVE_THRESHOLD_ARRAY'
*** WARNING C317 IN LINE 94 OF C:\Users\Pedro\Google Drive\UNICAMP\Mestrado\Firmware\inc\config\cslib_hwconfig.h: attemp
             -t to redefine macro 'AVERAGE_TOUCH_DELTA_ARRAY'
   8          #include "profiler_interface.h"
   9          #include "cslib.h"
  10          #include "comm_routines.h"
  11          //#include "SliderLibrary.h"
  12          //#include "SliderConfig.h"
  13          #include "cslib_sensor_descriptors.h"
  14          //#include "SliderDescriptors.h"
  15          
  16          void printOutput(uint16_t offset, uint8_t bytes);
  17          
  18          
  19          
  20          
  21          
  22          #define HEADER_TYPE_COUNT 9
  23          
  24          idata HeaderStruct_t headerEntries[HEADER_TYPE_COUNT] = {
  25          
  26          {"BASELINE", DEF_NUM_SENSORS},
  27          {"RAW", DEF_NUM_SENSORS},
  28          {"SINGACT", DEF_NUM_SENSORS},
  29          {"DEBACT", DEF_NUM_SENSORS},
  30          {"TDELTA", DEF_NUM_SENSORS},
  31          {"EXPVAL", DEF_NUM_SENSORS},
  32          //{"SLIDER", DEF_NUM_SLIDERS},
  33          {"NOISEEST", 1},
  34          {"INACTTHR", DEF_NUM_SENSORS},
  35          {"ACTTHR", DEF_NUM_SENSORS},
  36          };
  37          
  38          idata uint8_t offsetArray[HEADER_TYPE_COUNT];
  39          
  40          
C51 COMPILER V9.60.0.0   PROFILER_INTERFACE                                                07/15/2021 10:43:58 PAGE 2   

  41          //-----------------------------------------------------------------------------
  42          // Local variables and macros
  43          //-----------------------------------------------------------------------------
  44          
  45          
  46          
  47          uint8_t needANewLine = 0;                 // Flag to tell output to add a
  48                                                 // carriage return
  49          
  50          // These macros are called throughout the file to add carriage returns
  51          // to the output byte stream as needed
  52          #define NEED_NEWLINE() needANewLine = 1
  53          #define CLEAR_NEWLINE() needANewLine = 0
  54          
  55          // This flag is a one-shot that will output the defined header string
  56          // at the start of the string.  This example requires a device reset
  57          // before the header is ever sent again.
  58          uint8_t sendHeader = 1;
  59          
  60          //-----------------------------------------------------------------------------
  61          // Local function prototypes
  62          //-----------------------------------------------------------------------------
  63          
  64          void printHeader(void);               // Generates and outputs a header
  65                                                 // describing the data in the stream
  66          
  67          
  68          //-----------------------------------------------------------------------------
  69          // CSLIB_CommUpdate()
  70          //-----------------------------------------------------------------------------
  71          //
  72          // Exposed top-level debug output function.  Outputs one line of data output
  73          // for each call.  Output controls are compile-time switches found in
  74          // profiler_interface.h.  Function prints all of defined variable types in
  75          // sequence before printing the next defined variable type.  For exmample,
  76          // a configuration to print raw and baseline data for a system with two
  77          // channels would print:
  78          // <RAW_0> <RAW_1> <BASELINE_0> <BASELINE_1>
  79          //
  80          
  81          void CSLIB_commUpdate(void)
  82          {
  83   1         xdata uint16_t value[DEF_NUM_SENSORS];
  84   1      
  85   1         // This is set during device initialization as a one-shot
  86   1         if(sendHeader == 1)
  87   1         {
  88   2            printHeader();
  89   2            sendHeader = 0;
  90   2         }
  91   1      
  92   1      #if OUTPUT_MODE == FULL_OUTPUT_RX_FROM_SENSOR
  93   1      
  94   1      
  95   1         printBase = &CSLIB_node;
  96   1         printSize = sizeof(CSLIB_node[0]);
  97   1         printCount = DEF_NUM_SENSORS;
  98   1      
  99   1         //"BASELINE",
 100   1         printOutput(offsetArray[0], 2);
 101   1         //"RAW",
 102   1         printOutput(offsetArray[1], 2);
 103   1         //"SINGACT",
C51 COMPILER V9.60.0.0   PROFILER_INTERFACE                                                07/15/2021 10:43:58 PAGE 3   

 104   1         printOutputSingAct(offsetArray[2]);
 105   1         //"DEBACT",
 106   1         printOutputDebAct(offsetArray[3]);
 107   1         //"TDELTA",
 108   1         printOutputTDelta(offsetArray[4]);
 109   1         //"EXPVAL",
 110   1         printOutput(offsetArray[6], 2);
 111   1         /*
 112   1         //"SLIDER"
 113   1         printBase = &Slider;
 114   1         printSize = sizeof(Slider[0]);
 115   1         */
 116   1      
 117   1         //"NOISEEST",
 118   1         // Have to copy from idata CSLIB_systemNoiseAverage into xdata variable for printOutput()
 119   1         value[0] = (uint16_t)CSLIB_systemNoiseAverage;
 120   1         printBase = (uint16_t)&value[0];
 121   1         printCount = 1;
 122   1         printOutput(0, 2);
 123   1      
 124   1         //"INACTTHR",
 125   1         // Have to copy CODE CSLIB_inactiveThreshold into xdata variable for printOutput()
 126   1         for( printSize = 0; printSize < DEF_NUM_SENSORS; printSize++)
 127   1         {
 128   2                 value[printSize] = CSLIB_inactiveThreshold[printSize];
 129   2         }
 130   1         printBase = (uint16_t)&value[0];
 131   1         printSize = sizeof(uint16_t);
 132   1         printCount = DEF_NUM_SENSORS;
 133   1         printOutput( 0, sizeof(uint16_t));
 134   1      
 135   1         //"ACTTHR",
 136   1         // Have to copy CODE CSLIB_activeThreshold into xdata variable for printOutput()
 137   1         for( printSize = 0; printSize < DEF_NUM_SENSORS; printSize++)
 138   1         {
 139   2                 value[printSize] = CSLIB_activeThreshold[printSize];
 140   2         }
 141   1         printBase = (uint16_t)&value[0];
 142   1         printSize = sizeof(uint16_t);
 143   1         printCount = DEF_NUM_SENSORS;
 144   1         printOutput( 0, sizeof(uint16_t));
 145   1      
 146   1         outputNewLine();
 147   1         
 148   1         for( value[0] = 0; value[0] < 50; value[0]++ )
 149   1         {
 150   2                 //Empty loop to add delay after serial output.
 151   2         }
 152   1      #endif
 153   1      
 154   1      
 155   1      
 156   1      }
 157          
 158          
 159          
 160          
 161          //-----------------------------------------------------------------------------
 162          // printHeader
 163          //-----------------------------------------------------------------------------
 164          //
 165          // Function defines data bytes to follow with byte-by-byte designators.
 166          //
C51 COMPILER V9.60.0.0   PROFILER_INTERFACE                                                07/15/2021 10:43:58 PAGE 4   

 167          
 168          void calculateOffsets(void)
 169          {
 170   1      /*
 171   1      "BASELINE",
 172   1      "RAW",
 173   1      "PROCESS",
 174   1      "SINGACT",
 175   1      "DEBACT",
 176   1      "TDELTA",
 177   1      "NOISE",
 178   1      "EXPVAL",
 179   1      "NOISEEST"
 180   1      */
 181   1      #if OUTPUT_MODE == FULL_OUTPUT_RX_FROM_SENSOR
 182   1         uint16_t base = &CSLIB_node;
 183   1         // "BASELINE",
 184   1         offsetArray[0] = (uint16_t)&(CSLIB_node[0].currentBaseline) - base;
 185   1         // "RAW",
 186   1         offsetArray[1] = (uint16_t)&(CSLIB_node[0].rawBuffer[0]) - base;
 187   1         // "SINGACT",
 188   1         offsetArray[2] = (uint16_t)&(CSLIB_node[0].activeIndicator) - base;
 189   1         // "DEBACT",
 190   1         offsetArray[3] = (uint16_t)&(CSLIB_node[0].activeIndicator) - base;
 191   1         // "TDELTA",
 192   1         offsetArray[4] = (uint16_t)&(CSLIB_node[0].touchDeltaDiv16) - base;
 193   1         // "EXPVAL",
 194   1         offsetArray[6] = (uint16_t)&(CSLIB_node[0].expValue[0]) - base;
 195   1         // "NOISEEST"
 196   1         // Handled above, does not come from CSLIB_node[]
 197   1         // "ACTTHR",
 198   1         // Handled above, does not come from CSLIB_node[]
 199   1         // "INACTTHR",
 200   1         // Handled above, does not come from CSLIB_node[]
 201   1      
 202   1      
 203   1      
 204   1      #endif
 205   1      }
 206          
 207          void printHeader(void)
 208          {
 209   1         uint8_t index;
 210   1         outputNewLine();
 211   1      #ifdef HAS_SENSOR_DESCRIPTORS
 212   1         outputsensorDescriptors();
 213   1      #endif
 214   1      #ifdef HAS_SLIDER_DESCRIPTORS
                 OutputSliderDescriptors();
              #endif
 217   1         outputBeginHeader();
 218   1      
 219   1      #if OUTPUT_MODE == FULL_OUTPUT_RX_FROM_SENSOR
 220   1         for(index = 0; index < HEADER_TYPE_COUNT; index++)
 221   1         {
 222   2            outputHeaderCount(headerEntries[index]);
 223   2            outputBreak();
 224   2         }
 225   1      #endif
 226   1      
 227   1      #if OUTPUT_MODE == FULL_OUTPUT_RX_FROM_FILE
                 for(index = 0; index < HEADER_TYPE_COUNT; index++)
                 {
C51 COMPILER V9.60.0.0   PROFILER_INTERFACE                                                07/15/2021 10:43:58 PAGE 5   

                    outputHeaderCount(HeaderStrings[index], NUM_SENSORS);
                    outputBreak();
                 }
              #endif
 234   1         outputNewLine();
 235   1         calculateOffsets();
 236   1      
 237   1      
 238   1      }
 239          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    428    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       1
   IDATA SIZE       =     45    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
